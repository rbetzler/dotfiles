#!/bin/bash

# Run vgrep but discard the output
# Then start an interactive vgrep session
ivgrep()
{
  vgrep "$1" > /dev/null
  vgrep --interactive
}

# Do not exclude gitignored directories
ivgrep-all()
{
  vgrep --no-index "$1" > /dev/null
  vgrep --interactive
}

# Copied straight from vgreps docs
fvgrep() {
  INITIAL_QUERY="$1"
  VGREP_PREFIX="vgrep --no-header "
  FZF_DEFAULT_COMMAND="$VGREP_PREFIX '$INITIAL_QUERY'" \
  fzf --height 60% --bind "change:reload:$VGREP_PREFIX {q} || true" --ansi --phony --tac --query "$INITIAL_QUERY" \
  | awk '{print $1}' | xargs -I{} -o vgrep --show {}
}

# Remove entire line from file
# by writing to a new file
# then moving it back
remove-line(){
    files=$(grep -rl "$1" .)
    if [ -z "$files" ]; then
      echo "Pattern not found: $1"
      echo "In file: $2"
    else
      grep -vwE "$1" "$2" > "$2".tmp
      mv "$2".tmp "$2"
    fi
}

# Find replace across many files
find-replace(){
  sd $1 $2 $(grep -rl "$1" .)
}

# Makes a shell script executable
# according to git
make-executable(){
  chmod u+x "$1"
}


# Copy to system clipboard
cp-to-clipboard(){
  "$@" | xclip -selection clipboard
}

generate-ctags(){
  mkdir -p $HOME/.ctags
  ctags -f $HOME/.ctags/tags --recurse=yes --exclude=.git $PWD
}

# vim paginate off fd
vp-fd(){
  vim -p $(fd $1)
}

# vim paginate off grep
vp-grep(){
  vim -p $(grep -rl $1 .)
}

# Template find command and ignore a few top level dirs
__FD="fd --no-ignore -E backups -E dbt-autocomplete -E dracula -E google-cloud-sdk -E venv -E vgrep --type directory"
vf(){
  file=$(eval $__FD | fzf --height 60% --preview 'batcat --style=numbers --color=always --line-range :500 {}')
  if [[ "$file" != "" ]]; then
    vim "$file"
  fi
}

f(){
  file=$(eval $__FD | fzf --height 60% --preview 'tree -C {} | head -200')
  if [[ "$file" != "" ]]; then
    cd "$file"
  fi
}
