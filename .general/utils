#!/bin/bash

# Google something from the cli
ggl(){
  url=http://www.google.com/search?q=`echo "$@" | tr " " "+"`
  vivaldi "$url" &> /dev/null &
}

# Remove entire line from file
# by writing to a new file
# then moving it back
remove-line(){
    files=$(grep -rl "$1" .)
    if [ -z "$files" ]; then
      echo "Pattern not found: $1"
      echo "In file: $2"
    else
      grep -vwE "$1" "$2" > "$2".tmp
      mv "$2".tmp "$2"
    fi
}

# Find replace across many files
find-replace(){
  sd $1 $2 $(grep -rl "$1" .)
}

# Makes a shell script executable
# according to git
make-executable(){
  chmod u+x "$1"
}


# Copy to system clipboard
copy(){
  "$@" | xclip -selection clipboard
}

generate-ctags(){
  mkdir -p $HOME/.ctags
  ctags -f $HOME/.ctags/tags --recurse=yes --exclude=.git $PWD
}

# Slight duplicate to hack around inconsistent bat installs
if ! type bat &>/dev/null ; then
  bat_cmd="batcat"
else
  bat_cmd="bat"
fi

# Fuzzy commands
# Template find command and ignore a few top level dirs
__FD="fd --no-ignore -E backups -E dbt-autocomplete -E dracula -E google-cloud-sdk -E venv -E vgrep"
__FZF_PREVIEW="if [ -d {} ]; then tree -C {} | head -200; else $bat_cmd --style=numbers --color=always --line-range :500 {}; fi"
# __FZF_BIND='f8:execute(terminator --new-tab {})'
__FZF_BIND='f8:execute(vim {} < /dev/tty)'

# Return the selected file, like regular fzf
fz(){
  eval $__FD | fzf -m --height 60% --preview $__FZF_PREVIEW --bind $__FZF_BIND
}

# Open the selected files in vim
vf(){
  files=$(fz)
  if [[ "$files" != "" ]]; then
    vim -p $(echo $files)
  fi
}

# fzf-vgrep then open in vim
# If an arg is provided, then do not ignore hidden dirs and pass in the search string
vfgrep() {
  if [ -z "$1" ]; then
    include_hidden_files=""
    search_arg=""
  else
    include_hidden_files="--no-git"
    search_arg="$1"
  fi
  files=$(vgrep --no-header $include_hidden_files "$search_arg" | fzf -m --height 60% --bind "change:reload:vgrep $include_hidden_files --no-header {q} || true" --ansi --phony --tac | \
    awk '{if (NR==1) {print("+" $3, $2)} else {print("+\"tabnew +" $3, $2 "\"")}}' ORS=' ')
  if [[ "$files" != "" ]]; then
    eval 'vim' "$files"
  fi
}

# fzf to directories
f(){
  file=$(eval "$__FD  --type directory" | fzf --height 60% --reverse --preview $__FZF_PREVIEW)
  if [[ "$file" != "" ]]; then
    cd "$file"
  fi
}

sddf(){
  sd "$1" "$2" "$3" -p > /tmp/sd-diff-file
  delta "$3" /tmp/sd-diff-file
}
