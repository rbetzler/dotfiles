---
- hosts: localhost
  connection: local
  tasks:
    - name: Set default shell to zsh
      become: yes
      ansible.builtin.command: usermod --shell /usr/bin/zsh {{ ansible_env.USER }}
      changed_when: false
    - name: Link dracula themes
      ansible.builtin.file:
        src: "{{ ansible_env.HOME }}/dracula/zsh/dracula.zsh-theme"
        dest: "{{ ansible_env.HOME }}/.oh-my-zsh/custom/themes/dracula.zsh-theme"
        state: link
    - name: Check for neovim plugins
      changed_when: false
      register: nvim_plugins
      ansible.builtin.shell: |
        if [ -f "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload/plug.vim" ]; then
          echo installed
        else
          echo not-installed
        fi
    - name: Install vim plug for neovim plugins
      when: nvim_plugins.stdout == "not-installed"
      ansible.builtin.shell: |
        sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
          https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    - name: Check for autocomplete for pulumi
      changed_when: false
      register: autocomplete_pulumi
      ansible.builtin.shell: |
        if [ -f "{{ ansible_env.HOME }}/.oh-my-zsh/custom/plugins/pulumi/pulumi.plugin.zsh" ]; then
          echo installed
        else
          echo not-installed
        fi
    - name: Generate autocomplete for pulumi
      when: autocomplete_pulumi.stdout == "not-installed"
      ansible.builtin.shell: |
        mkdir -p "${HOME}/.oh-my-zsh/custom/plugins/pulumi"
        pulumi gen-completion zsh > "${HOME}/.oh-my-zsh/custom/plugins/pulumi/pulumi.plugin.zsh"
    - name: Check for autocomplete for argo
      changed_when: false
      register: autocomplete_argo
      ansible.builtin.shell: |
        if [ -f "{{ ansible_env.HOME }}/.utils/argo.sh" ]; then
          echo installed
        else
          echo not-installed
        fi
    - name: Generate autocomplete for argo
      when: autocomplete_argo.stdout == "not-installed"
      ansible.builtin.shell: |
        argo completion zsh > "${HOME}/.utils/argo.sh"
        sed -i '1i compdef _argo argo' "${HOME}/.utils/argo.sh"
    - name: Check for autocomplete for argocd
      changed_when: false
      register: autocomplete_argocd
      ansible.builtin.shell: |
        if [ -f "{{ ansible_env.HOME }}/.utils/argocd.sh" ]; then
          echo installed
        else
          echo not-installed
        fi
    - name: Generate autocomplete for argocd
      when: autocomplete_argocd.stdout == "not-installed"
      ansible.builtin.shell: |
        argocd completion zsh > "${HOME}/.utils/argocd.sh"
    - name: Check for autocomplete for kubectl
      changed_when: false
      register: autocomplete_kubectl
      ansible.builtin.shell: |
        if [ -f "{{ ansible_env.HOME }}/.utils/kubectl.sh" ]; then
          echo installed
        else
          echo not-installed
        fi
    - name: Generate autocomplete for kubectl
      when: autocomplete_kubectl.stdout == "not-installed"
      ansible.builtin.shell: |
        kubectl completion zsh > "${HOME}/.utils/kubectl.sh"
    - name: Check for autocomplete for helm
      changed_when: false
      register: autocomplete_helm
      ansible.builtin.shell: |
        if [ -f "{{ ansible_env.HOME }}/.utils/helm.sh" ]; then
          echo installed
        else
          echo not-installed
        fi
    - name: Generate autocomplete for helm
      when: autocomplete_helm.stdout == "not-installed"
      ansible.builtin.shell: |
        helm completion zsh > "${HOME}/.utils/helm.sh"
    - name: Check for autocomplete for autojump
      changed_when: false
      register: autocomplete_autojump
      ansible.builtin.shell: |
        if [ -f "{{ ansible_env.HOME }}/.local/share/autojump/autojump.zsh" ]; then
          echo installed
        else
          echo not-installed
        fi
    - name: Generate autocomplete for autojump
      when: autocomplete_autojump.stdout == "not-installed"
      ansible.builtin.shell: |
        mkdir -p "${HOME}/.local/share/autojump/"
        cat "$(which autojump | cut -d/ -f1-4)/share/autojump/autojump.zsh" > "${HOME}/.local/share/autojump/autojump.zsh"
