[user]
    name = rbetzler
    email = rbetzler94@gmail.com

[color]
    diff = auto
    status = auto
    branch = auto
    ui = auto

[pager]
    diff = bash ~/.git_aliases/delta_config
    log = bash ~/.git_aliases/delta_config
    reflog = bash ~/.git_aliases/delta_config
    show = bash ~/.git_aliases/delta_config

[delta]
    plus-style = "syntax #012800"
    minus-style = "syntax #340001"
    syntax-theme = Monokai Extended
    navigate = true
    side-by-side = true

[interactive]
    diffFilter = delta --color-only

[alias]
    a = add
    af = "add -f"
    ap = "add -p"
    b = branch
    ba = "branch -a"
    bl = "branch -l"
    bd = "branch -D"
    b-current = "!git branch --no-color 2> /dev/null | sed -e '/^[^*]/d; s/^* //;'"
    b-exists =  "!f() { \
      git show-ref --verify --quiet refs/heads/$1; \
    }; f"
    b-primary = !bash ~/.git_aliases/get_primary_branch
    c = commit
    co = checkout
    cob = "checkout -b"
    cob-primary = !bash ~/.git_aliases/checkout_off_primary
    coh = "!f() { \
      git co HEAD~\"$1\"; \
    }; f"
    # Use ${GIT_PREFIX:-./} to resolve to the current directory
    # e.g., when needing to reference relative filepaths
    coh-file = "!f() { \
      git co HEAD~\"$1\" -- ${GIT_PREFIX:-./}\"$2\"; \
    }; f"
    coh-stage = "checkout -p HEAD"
    co-theirs = "co --theirs"
    cma = "commit --amend --no-edit"
    cma-message = "commit --amend"
    cmm = "commit -m"
    cmm-no-verify = "commit -n -m"
    chpk = "cherry-pick"
    chpka = "chpk --abort"
    chpkc = "chpk --continue"
    df = diff
    dfc = "diff --cached"
    edit-st-file = "!f() { \
      vim $(git status --short | head -\"$1\" | tail -1 | awk '{print $2}'); \
    }; f"
    edit-df-files = "!f() { \
      vim -o $(git diff --name-only); \
    }; f"
    ft = "fetch"
    ft-upstream = !bash ~/.git_aliases/fetch_upstream
    l = log
    lg = "log --graph"
    lp = "log -p"
    l-feat-commits = !bash ~/.git_aliases/log_feature_commits
    l-feat-hashs = !bash ~/.git_aliases/log_feature_commits 0
    l-grep = "!f() { \
      git log --grep=\"$1\";\
    }; f"
    l-mine = "log --author=rbetzler"
    p = push
    pf = "push -f"
    pfl = "push --force-with-lease"
    pr-comments ="!f() { \
      gh pr view --comments \"$1\"; \
    }; f"
    pr-diff = "!f() { \
      gh pr diff \"$1\"; \
    }; f"
    pr-draft = "!f() { \
      gh pr create --draft --fill; \
    }; f"
    pr-draft-staging = "!f() { \
      gh pr create --draft --fill --base staging; \
    }; f"
    pr-list = !bash ~/.git_aliases/list_prs 0
    pr-list-mine = !bash ~/.git_aliases/list_prs 1
    pr-list-work-team = !bash ~/.git_aliases/list_prs 2
    pr-open = "!f() { \
      gh pr create --fill; \
    }; f"
    pr-open-staging = "!f() { \
      gh pr create --fill --base staging; \
    }; f"
    prs ="!f() { \
      gh pr status; \
    }; f"
    psu = !bash ~/.git_aliases/push_set_upstream
    psu-force = !bash ~/.git_aliases/push_set_upstream 0
    pl = pull
    rb = rebase
    rba = "rebase --abort"
    rbc = "rebase --continue"
    rbi = "rebase -i"
    rbi-mine = !bash ~/.git_aliases/rebase_my_commits
    rbih = "!f() { \
      git rbi HEAD~\"$1\"; \
    }; f"
    rbih-merges = "!f() { \
      git rbi HEAD~\"$1\" --rebase-merges; \
    }; f"
    rb-primary = !bash ~/.git_aliases/rebase_off_primary
    rb-staging = !bash ~/.git_aliases/rebase_off_primary 0
    rmt-add = "!f() { \
      git remote add \"$1\" \"$2\"; \
    }; f"
    rmt-list = "remote -v"
    rmt-rmv = "!f() { \
      git remote remove \"$1\"; \
    }; f"
    rps-add = "!f() { \
      gita add \"$1\"; \
    }; f"
    rps-status = "!f() { \
      gita ll; \
    }; f"
    rps-list-branches = "!f() { \
      gita super bl; \
    }; f"
    rflg = "!f() { \
      git reflog --grep-reflog=\"$1\"; \
    }; f"
    rset = reset
    rset-head = "!f() { \
      git reset HEAD~\"$1\"; \
    }; f"
    rset-hard = "!f() { \
      git reset --hard origin/\"$1\"; \
    }; f"
    rset-current = "!f() { \
      git rset-hard $(git b-current); \
    }; f"
    rset-primary = "!f() { \
      git rset-hard $(git b-primary); \
    }; f"
    rstr-stg = "restore --stage"
    rvrt = revert
    rvrt-a = "revert --abort"
    rvrt-c = "revert --continue"
    rvrt-no-commit = "revert --no-commit"
    rvrt-no-commit-head = "rvrt-no-commit HEAD"
    sh = show
    shh = "!f() { \
      git show HEAD~\"$1\"; \
    }; f"
    shh-file-names = "!f() { \
      git show HEAD~\"$1\" --pretty="" --name-only; \
    }; f"
    st = status
    sth = stash
    sth-apply = "stash apply"
    sth-clear = "stash clear"
    sth-diff = "stash show -p"
    sth-drop = "stash drop"
    sth-list = "stash list"
    sth-pop = "stash pop"
