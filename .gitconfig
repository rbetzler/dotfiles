[user]
    name = rbetzler
    email = rbetzler94@gmail.com

[color]
    diff = auto
    status = auto
    branch = auto
    ui = auto

[pager]
    diff = bash ~/.git_aliases/delta_config
    log = bash ~/.git_aliases/delta_config
    reflog = bash ~/.git_aliases/delta_config
    show = bash ~/.git_aliases/delta_config

[delta]
    plus-style = "syntax #012800"
    minus-style = "syntax #340001"
    syntax-theme = Monokai Extended
    navigate = true
    side-by-side = true

[interactive]
    diffFilter = delta --color-only

[merge]
	tool = vimdiff

[alias]
    # Adding
    a = add
    af = "add -f"
    ap = "add -p"

    # Branching
    b = branch
    ba = "branch -a"
    bl = "branch -l"
    bd = "branch -D"
    # swap b-current for this: git branch --show-current
    b-current = "!git branch --no-color 2> /dev/null | sed -e '/^[^*]/d; s/^* //;'"
    b-exists =  "!f() { \
      git show-ref --verify --quiet refs/heads/$1; \
    }; f"
    b-primary = !bash ~/.git_aliases/get_primary_branch


    # file name, line start, line end or +/-
    blm-lines =  "!f() { \
      git blame -L \"$2\",\"$3\" -- \"$1\"; \
    }; f"

    # Checkout
    co = checkout
    cob = "checkout -b"
    cob-primary = !bash ~/.git_aliases/checkout_off_primary primary
    cob-staging = !bash ~/.git_aliases/checkout_off_primary staging
    cof = "!f() { \
      git branch -l | fzf --reverse --height 10% | git checkout ; \
    }; f"
    coh = "!f() { \
      git co HEAD~\"$1\"; \
    }; f"
    # Use ${GIT_PREFIX:-./} to resolve to the current directory
    # e.g., when needing to reference relative filepaths
    coh-file = "!f() { \
      git co HEAD~\"$1\" -- ${GIT_PREFIX:-./}\"$2\"; \
    }; f"
    coh-stage = "checkout -p HEAD"
    co-theirs = "co --theirs"

    # Commiting
    c = commit
    cma = "commit --amend --no-edit"
    cma-message = "commit --amend"
    cmm = "commit -m"
    cmm-no-verify = "commit -n -m"

    # Cherry pick
    chy = "cherry-pick"
    chya = "cherry-pick --abort"
    chyc = "cherry-pick --continue"

    # Diffs
    df = diff
    dfc = "diff --cached"
    dfz = "!f() { \
      git diff $@ --name-only | fzf -m --ansi --preview \"git diff $@ --color=always -- {-1} \" ; \
    }; f"
    df-patch = "!f() { \
      git diff ..\"$1\" > /tmp/my.patch ; \
      git apply /tmp/my.patch ; \
    }; f"
    edit-st-file = "!f() { \
      vim $(git status --short | head -\"$1\" | tail -1 | awk '{print $2}'); \
    }; f"
    edit-df-files = "!f() { \
      vim -o $(git diff --name-only); \
    }; f"
    find-common-ancestor = "merge-base"
    ft = "fetch"
    ft-upstream = !bash ~/.git_aliases/fetch_upstream

    gh-apply-patch = "!f() { \
      curl \"$1\" | git apply ;\
    }; f"

    # Logging
    l = log
    lg = "log --graph"
    lfz = !bash ~/.git_aliases/log_fzf
    lp = "log -p"
    lp-mine = "log -p --author=rbetzler"
    l-feat-commits = !bash ~/.git_aliases/log_feature_commits
    l-feat-hashs = !bash ~/.git_aliases/log_feature_commits 0
    l-hashs = log --pretty=format:%h
    l-files = "log --name-only"
    l-files-mine = "log --author=rbetzler --name-only"
    l-grep = "!f() { \
      git log --grep=\"$1\";\
    }; f"
    l-mine = "log --author=rbetzler"
    l-search = "log -S"

    # Pick changes from conflict
    pick-ours = "!f() { \
      git checkout --ours $(git diff --name-only --diff-filter=U); \
    }; f"
    pick-theirs = "!f() { \
      git checkout --theirs $(git diff --name-only --diff-filter=U); \
    }; f"

    # Pushing
    p = push
    pf = "push -f"
    pfl = "push --force-with-lease"
    psu = !bash ~/.git_aliases/push_set_upstream
    psu-force = !bash ~/.git_aliases/push_set_upstream 0

    pr-comments ="!f() { \
      gh pr view --comments \"$1\"; \
    }; f"
    pr-diff = "!f() { \
      gh pr diff \"$1\"; \
    }; f"

    # Open, reopen drafts
    pr-draft = !bash ~/.git_aliases/open_prs draft main open
    pr-draft-staging = !bash ~/.git_aliases/open_prs draft staging open
    pr-redraft = !bash ~/.git_aliases/open_prs draft main reopen
    pr-redraft-staging = !bash ~/.git_aliases/open_prs draft staging reopen

    pr-list = !bash ~/.git_aliases/list_prs 0
    pr-list-mine = !bash ~/.git_aliases/list_prs 1
    pr-list-work-team = !bash ~/.git_aliases/list_prs 2

    # Open, reopen prs
    pr-open = !bash ~/.git_aliases/open_prs open main open
    pr-open-staging = !bash ~/.git_aliases/open_prs open staging open
    pr-reopen = !bash ~/.git_aliases/open_prs open main reopen
    pr-reopen-staging = !bash ~/.git_aliases/open_prs open staging reopen

    prs ="!f() { \
      gh pr status; \
    }; f"

    # Pulling
    pl = pull
    pl-all = !bash ~/.git_aliases/pull_all
    prn-rmt = "fetch --prune origin"

    # Rebasing
    rb = rebase
    rba = "rebase --abort"
    rbc = "rebase --continue"
    rbi = "rebase -i"
    rbi-mine = !bash ~/.git_aliases/rebase_my_commits
    rbi-mine-staging = !bash ~/.git_aliases/rebase_my_commits staging
    rbih = "!f() { \
      git rbi HEAD~\"$1\"; \
    }; f"
    rbih-merges = "!f() { \
      git rbi HEAD~\"$1\" --rebase-merges; \
    }; f"
    rb-primary = !bash ~/.git_aliases/rebase_off_primary
    rb-staging = !bash ~/.git_aliases/rebase_off_primary 0
    rb-loop = !bash ~/.git_aliases/rebase_loop main

    # Remote, repo management
    rmt-add = "!f() { \
      git remote add \"$1\" \"$2\"; \
    }; f"
    rmt-list = "remote -v"
    rmt-rmv = "!f() { \
      git remote remove \"$1\"; \
    }; f"
    rps-add = "!f() { \
      gita add \"$1\"; \
    }; f"
    rps-status = "!f() { \
      gita ll; \
    }; f"
    rps-list-branches = "!f() { \
      gita super bl; \
    }; f"

    rflg = "!f() { \
      git reflog --grep-reflog=\"$1\"; \
    }; f"

    # Resets
    rset = reset
    rset-head = "!f() { \
      git reset HEAD~\"$1\"; \
    }; f"
    rset-hard = "!f() { \
      git reset --hard origin/\"$1\"; \
    }; f"
    rset-current = "!f() { \
      git rset-hard $(git b-current); \
    }; f"
    rset-primary = "!f() { \
      git rset-hard $(git b-primary); \
    }; f"

    rstr-stg = "restore --stage"

    # Reverts
    rvrt = revert
    rvrt-a = "revert --abort"
    rvrt-c = "revert --continue"
    rvrt-no-commit = "revert --no-commit"
    rvrt-no-commit-head = "rvrt-no-commit HEAD"

    # Showing
    sh = show
    shh = "!f() { \
      git show HEAD~\"$1\"; \
    }; f"
    shh-file-names = "!f() { \
      git show HEAD~\"$1\" --pretty="" --name-only; \
    }; f"

    st = status

    # Stashing
    sth = stash
    sth-apply = "stash apply"
    sth-clear = "stash clear"
    sth-diff = "stash show -p"
    sth-drop = "stash drop"
    sthz = !bash ~/.git_aliases/stash_fzf
    sth-list = "stash list"
    sth-pop = "stash pop"

    # Tag
    dl-tag = "tag -d"
    p-tag = "push origin --tags"
    p-tag-delete = "push origin --delete"
    pf-tag = "push origin --tags --force"
    tag-a = "tag -a"
    tag-list = "tag -n100"
